# AlgoTradingStrategyProtyping

This project is my first try with the very fine and powerful D language (dlang), the one chosen to build a trading strategy prototyping tool. C++, Java, Python, Node and similar languages algo trading programmers won't have issues toying with D on this project.

This tool is formed by:
	1. An algo server on which one will develop their own strategies (there are some defaut strategies useful to build the market);
	2. A real (yet simple, but very flexible) memory based Exchange -- called the DExchange (might be moved to it's own project one day);
	3. A KPI analyser (here goes the main reason for this project).

Once your algorithm is tuned to perfection, go on and reimplement it on your favorite platform -- if you are a pro and want C++, consider the powerful and complete solution at OgreRobot.com, responsible for this project.

If you are a home trader and use MetaTrader, Zorro or a similar tool, be aware that this tool offers a more realistic environment and it certainly worth testing it here as well as backtesting it elsewhere (if you really believe in backtests for trading).

# The Usage Process

	Since this prototyping tool builds a real market to test a real trading algorithm (it has its own and also real Exchange), real(ish) parties are needed to trade with your algorithm -- they are present in 'trading_strategies' folder/package. We have:
	- HumanInformedTrader
	- HumanSpeculator
	- HumanDayTraderSpeculator
	- MarketMakerRobot
	- ArbitrageRobot

	And, of course, all the standard algo trading strategies -- here you will find, for free, only the naive implementations. If you are an algo trading company and your strategies look like these / can't perform at least like these, be worried; if you want the ones optimized for the best execution possible, visit OgreRobot.com
	- NaivePOV (the professional OgreRobot.com ones are AntecipativePOV, OptimizedForAggressionPOV and OgrePOV -- the hibrid one)
	- NaiveVWAP (OgreRobot.com's version don't just use a simple average... it uses also bids/asks attacks correlations and is called OgreVWAP)
	- NaiveTWAP (TWAP is always naive... don't use it professionally since you'll be giving money to others)
	- NaiveTrendFollower
	- NaiveSniper
	- NaivePegged
	- NaiveConditional
	- NaiveArbitrage
	- NaiveFRAArbitrage
	- NaiveIndexRebalancing
	- NaiveDeltaNeutral
	- NaiveMeanReversion

	Important note: This project does not count with a 'MicroMarketOrderOptimization' layer, designed to improve the execution even further by taking measures to benefit / not be prejudicted by certain order addition/deletion/edition and specific book patterns -- only OgreRobot.com has that. Nonetheless, this should not affect your algorithms prototyped here, since no 'trading_strategy' in this project will be using any 'MicroMarketOptimization'.

# for DExchange development with auto build & testing, use:
d="DExchange"; FLAGS="-release -O -mcpu=native -m64 -inline -boundscheck=off"; _FLAGS="-boundscheck=on -check=on"; while sleep 1; do for f in *.d; do if [ "$f" -nt "$d" ]; then echo -en "`date`: COMPILING..."; dmd $FLAGS -lowmem -of="$d" AbstractDExchange.d AbstractDExchangeSession.d DExchange.d LocalDExchange.d LocalDExchangeSession.d TestUtils.d Types.d BookManipulators.d AlgoTradingStrategyPrototyping.d && echo -en "\n`date`: TESTING:  `ls -l "$d" | sed 's|.* \([0-9][0-9][0-9][0-9]*.*\)|\1|'`\n" && ./"$d" || echo -en '\n\n\n\n\n\n'; touch "$d"; rm -f "$d".obj; fi; done; done

# for AlgoTradingStrategyPrototyping development with auto building:
d="AlgoTradingStrategyPrototyping"; FLAGS="-release -O -mcpu=native -m64 -inline -boundscheck=off"; _FLAGS="-boundscheck=on -check=on"; while sleep 1; do for f in *.d; do if [ "$f" -nt "$d" ]; then echo -en "`date`: COMPILING..."; dmd $FLAGS -lowmem -of="$d" AbstractDExchange.d AbstractDExchangeSession.d DExchange.d LocalDExchange.d LocalDExchangeSession.d TestUtils.d Types.d BookManipulators.d AlgoTradingStrategyPrototyping.d && echo -en "\n`date`: TESTING:  `ls -l "$d" | sed 's|.* \([0-9][0-9][0-9][0-9]*.*\)|\1|'`\n" && ./"$d" || echo -en '\n\n\n\n\n\n'; touch "$d"; rm -f "$d".obj; fi; done; done

